@use "norm";

// colors
:root {
  --txt-c: #000000;
  --txt-c-s: #757575;
  --bgc: #e5f6ff;
  --red-c: #f52222;
  --status-b-c: #00839f;
  --status-g-c: #008a27;
  --btn-light-g-c: #e5ffeb;
  --btn-light-y-c: #fbffe5;
  --btn-g-c: #00df74;
  --btn-r-c: #df0000;
}

// font
@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700;800&display=swap");

body {
  font-family: "Poppins", sans-serif;
}

// Globals
*,
*::before,
*::after {
  box-sizing: border-box;
}

h1,
h2,
h2,
h4,
h5,
h6,
p {
  margin-top: 0;
}

ul {
    padding: 0;
    list-style: none;
}

a {
    text-decoration: none;
    color: inherit;

    &:active, &:visited {
        text-decoration: none;
        color: inherit;
    }
}

input, button {
    border: none;
    outline: none;
    background-color: transparent;
    color: inherit;
}

// container classes
@mixin min($bp, $max: "null", $device: "screen") {
  @if $max == "null" {
    @media only #{$device} and (min-width: #{$bp}) {
      @content;
    }
  } @else {
    @media only #{$device} and (min-width: #{$bp}) and (max-width: #{$max}) {
      @content;
    }
  }
}

@function bp($bp) {
  @return map-get($breakpoints, $bp);
}

$breakpoints: (
  na: 0px,
  // For BS grid
    xs: 320px,
  // Smartphone
    sm: 600px,
  // Tablets
    md: 900px,
  // Tablets Landscape and small desktops
    lg: 1200px,
  // Desktops
    xl: 1800px,
  // Large Desktop
);

@function container($container-size, $true-val: false) {
  @return map-get($container-sizes, $container-size);
}

$container-sizes: (
  sm: map-get($breakpoints, sm) - 30px,
  md: map-get($breakpoints, md) - 40px,
  lg: map-get($breakpoints, lg) - 50px,
  xl: map-get($breakpoints, xl) - 400px
);

.container {
  padding-right: 1rem;
  padding-left: 1rem;

  &:not(.is-fluid) {
    margin: 0 auto;

    @each $bp, $container-size in $container-sizes {
      @include min(#{bp(#{$bp})}) {
        width: 100%;
        max-width: container(#{$bp});
      }
    }
  }
}

@each $bp, $container-size in $container-sizes {
  .container-#{$bp} {
    margin: 0 auto;
    padding-right: 1rem;
    padding-left: 1rem;
    width: 100%;

    $i: index($container-sizes, $bp $container-size);

    @for $j from $i through length($container-sizes) {
      @include min(#{bp(nth(nth($container-sizes, $j), 1))}) {
        max-width: container(#{nth(nth($container-sizes, $j), 1)});
      }
    }
  }
}